buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "gt"
            url = "https://gregtech.overminddl1.com/"
        }
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath "com.github.GTNewHorizons:ForgeGradle:1.2.4"
    }
}

apply plugin: 'forge'
apply plugin: 'curseforge'

ext.build = System.getenv().BUILD_NUMBER ?: '85'
ext.modversion = "${project.version_major}.${project.version_minor}.${project.version_micro}.${build}"

group = 'com.github.lunatrius'
version = "${project.version_minecraft}-${modversion}"

compileJava.options.encoding = 'UTF-8'

idea {
    module {
        downloadSources = true
    }
}

minecraft {
    version = "${project.version_minecraft}-${project.version_forge}"

    if (project.hasProperty('version_mappings'))
        mappings = project.version_mappings

    if (!project.hasProperty('run_location'))
        runDir = 'run'
    else
        runDir = run_location.replace('{modid}', project.name).replace('{mcversion}', project.version_minecraft)

    replaceIn 'reference/Reference.java'
    replace '${version}', modversion
    replace '${mcversion}', project.version_minecraft
    replace '${forgeversion}', project.version_forge
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand([
                'modid'          : project.name,
                'version'        : modversion,
                'mcversion'      : project.version_minecraft,
                'forgeversion'   : project.version_forge,
                'minforgeversion': project.hasProperty('version_minforge') ? project.version_minforge : project.version_forge,
                'coreversion'    : project.version_lunatriuscore
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories {
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
}

dependencies {
    compile "com.github.GTNewHorizons:LunatriusCore:master-SNAPSHOT:dev"
}

def addDependency(depFilter, depName, depPath) {
    if (fileTree('libs').include(depFilter).getFiles().size() == 1) {
        logger.lifecycle "Building with ${depName}..."
    } else {
        logger.warn "Building without ${depName}..."

        if (depPath != null) {
            sourceSets.main.java.excludes += [depPath]
            idea.module.excludeDirs += [file("src/main/java/${depPath}")]
        }
    }
}

addDependency('BloodMagic*', 'BloodMagic', 'com/github/lunatrius/ingameinfo/integration/bloodmagic')
addDependency('SimplyJetpacks*', 'SimplyJetpacks', 'com/github/lunatrius/ingameinfo/integration/simplyjetpacks')
addDependency('*TerraFirmaCraft*', 'TerraFirmaCraft', 'com/github/lunatrius/ingameinfo/integration/terrafirmacraft')
addDependency('Thaumcraft*', 'Thaumcraft', 'com/github/lunatrius/ingameinfo/integration/thaumcraft')

def commonManifest = {
    if (project.hasProperty('extra_fmlat')) {
        attributes 'FMLAT': project.extra_fmlat
    }
}

jar {
    classifier = project.hasProperty('extra_classifier') ? project.extra_classifier : 'universal'
    manifest commonManifest
}

task devJar(dependsOn: 'classes', type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    manifest commonManifest
}

task sourceJar(dependsOn: 'classes', type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
    manifest commonManifest
}

artifacts {
    archives devJar
    archives sourceJar
}

if (!project.hasProperty('keystore_location'))
    ext.keystore_location = '.'

if (!project.hasProperty('keystore_alias'))
    ext.keystore_alias = ''

if (!project.hasProperty('keystore_password'))
    ext.keystore_password = ''

task signJars(dependsOn: ['reobf', 'devJar', 'sourceJar']) {
    inputs.dir jar.destinationDir
    inputs.file keystore_location
    inputs.property 'keystore_alias', keystore_alias
    inputs.property 'keystore_password', keystore_password
    outputs.dir jar.destinationDir

    onlyIf {
        return keystore_location != '.'
    }

    doLast {
        jar.destinationDir.eachFile { file ->
            if (!file.getPath().endsWith('.jar'))
                return;

            logger.lifecycle "signing ${file}"
            ant.signjar(
                    destDir: file.getParentFile(),
                    jar: file,
                    keystore: keystore_location,
                    alias: keystore_alias,
                    storepass: keystore_password
            )
        }
    }
}

if (!project.hasProperty('release_location'))
    ext.release_location = '.'
else
    ext.release_location = release_location.replace('{modid}', project.name).replace('{mcversion}', project.version_minecraft).replace('{version}', version)

task release(dependsOn: 'signJars', type: Copy) {
    from project.tasks.jar.destinationDir
    into project.file(project.release_location)

    eachFile { file ->
        logger.lifecycle "copying ${file}"
    }

    onlyIf {
        return project.release_location != '.'
    }
}

if (project.hasProperty('api_key_curseforge') && project.hasProperty('extra_curseforge_id')) {
    curse {
        dependsOn signJars
        releaseType = project.hasProperty('extra_curseforge_releasetype') ? project.extra_curseforge_releasetype : 'release'
        apiKey = project.api_key_curseforge
        projectId = project.extra_curseforge_id
        changelog = ''

        additionalArtifact devJar, sourceJar
        relatedProject 'lunatriuscore'
    }
}
